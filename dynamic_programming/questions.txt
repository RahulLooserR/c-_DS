########## fractional knapsack comes under greedy approach 
not under dynamic programming (taking a part of element is allowed
##############################################################

########## 0-1 knapsack ################################
1. Knapsack problem (solve using recursion)
	capacity of bag is W,
	weight_of_item[] {1,2,4,5,9}
	value_of_item[]  {20,4,5,6,7}
	find maximum profit

2. solve above using memoisation and recursion
3. solve using memoisation and top down approach (no recursion, iterative solution)
4. subset sum problem: find if subset exists in array whose sum is equal to x.
5. equal sum partition: can array be divided into two partitions whose sums are equal
6. count subset whose sum is equal to x.
7. minimum subset difference 
8. count the number of subset with given difference.
9. target sum problem: assign each element wiht +/- so that sum of the array is eqaul to given sum
#########################################################

############## unbounded knapsack #########################
10. unbounded knapsack problem (can include item multiple times)
11. Rod cutting problem:
	given a rod of length N, divide it such it we get maximum profit
	L: 10
	len[] {1, 2, 4, 5, 7, 8}
	val[] {2, 3, 4, 5, 7, 9}

	if len[] is not given the create your own len[1->L]
12. maximum number of ways :
	coin change problem:
	given an unlimited supply of coins of below type
	coins[] {3, 1, 5, 2}
	sum: 5
	find the maximum number of ways so that we get sum of 5

13. minimum number  of coins whose sum is equal to x
###########################################################


############## longest common subsequence (LCS) ##################
14. Recursive approach
15. Memoize
16. top-down
17. find longest substring
18. print lcs
19. length of shortest supersequence
	s1: geek
	s2: ela
	worst: geekela
	best: geekla   -> answer 6
20. minimum number of insertion and deletion for s1->s2
	deletion = s1-lcs
	insertion = s2-lcs

21. longest palindromic subsequence
	find the longest substring which is palindrome
22. minimum number of deletion required to get longest palindromic
	sequence
23. printing shortest common supersequence (related with 19)
24. longest repeating subsequence
	eg: abacbdf -> ab
25. sequence pattern matching 
	if sting a is subsequence of string  b
	eg: A-> abc
		B-> xbaobdc o/p -> true
26. Minimum number of insertion to make string palindrome (== 22).
###################################################################
